---
# The routing-api role contains the following jobs:
#
# - global-properties: Dummy BOSH job used to host global parameters that are
#   required to configure SCF
#
# - authorize-internal-ca: Install both internal and UAA CA certificates
#
# Also: metron_agent, routing-api
apiVersion: "apps/v1beta1"
kind: "StatefulSet"
metadata:
  name: "routing-api"
  labels:
    skiff-role-name: "routing-api"
spec:
  replicas: 1
  serviceName: "routing-api-set"
  template:
    metadata:
      annotations: {}
      labels:
        skiff-role-name: "routing-api"
      name: "routing-api"
    spec:
      containers:
      - env:
        - name: "DIEGO_CLIENT_CERT"
          valueFrom:
            secretKeyRef:
              key: "diego-client-cert"
              name: "secrets"
        - name: "DIEGO_CLIENT_KEY"
          valueFrom:
            secretKeyRef:
              key: "diego-client-key"
              name: "secrets"
        - name: "DNS_HEALTH_CHECK_HOST"
          value: "127.0.0.1"
        - name: "DOMAIN"
          value: "cf-dev.io"
        - name: "INTERNAL_CA_CERT"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-cert"
              name: "secrets"
        - name: "INTERNAL_CA_KEY"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-key"
              name: "secrets"
        - name: "KUBERNETES_NAMESPACE"
          valueFrom:
            fieldRef:
              fieldPath: "metadata.namespace"
        - name: "KUBE_AZ"
          value: "z1"
        - name: "KUBE_SIZING_TCP_ROUTER_PORTS_TCP_ROUTE_MAX"
          value: "20008"
        - name: "KUBE_SIZING_TCP_ROUTER_PORTS_TCP_ROUTE_MIN"
          value: "20000"
        - name: "LOG_LEVEL"
          value: "info"
        - name: "METRON_CERT"
          valueFrom:
            secretKeyRef:
              key: "metron-cert"
              name: "secrets"
        - name: "METRON_KEY"
          valueFrom:
            secretKeyRef:
              key: "metron-key"
              name: "secrets"
        - name: "MONIT_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "monit-password"
              name: "secrets"
        - name: "MYSQL_ROUTING_API_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-routing-api-password"
              name: "secrets"
        - name: "SCF_LOG_PROTOCOL"
          value: "tcp"
        - name: "UAA_CA_CERT"
          valueFrom:
            secretKeyRef:
              key: "uaa-ca-cert"
              name: "secrets"
        - name: "UAA_HOST"
          value: "uaa.cf-dev.io"
        - name: "UAA_PORT"
          value: "2793"
        image: "splatform/scf-routing-api:8b27a7e54e37fdaa9521136e60b1cb73fd1feed8"
        lifecycle:
          preStop:
            exec:
              command:
              - "/opt/fissile/pre-stop.sh"
        livenessProbe: ~
        name: "routing-api"
        ports:
        - containerPort: 3000
          name: "routing-api"
          protocol: "TCP"
        readinessProbe:
          tcpSocket:
            port: 3000
        resources:
          requests:
            memory: "114Mi"
            cpu: "4000m"
          limits: {}
        securityContext: ~
        volumeMounts: ~
      dnsPolicy: "ClusterFirst"
      imagePullSecrets:
      - name: "registry-credentials"
      restartPolicy: "Always"
      terminationGracePeriodSeconds: 600
      volumes: ~
---
apiVersion: "v1"
items:
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "routing-api-set"
  spec:
    clusterIP: "None"
    ports:
    - name: "routing-api"
      port: 3000
      protocol: "TCP"
      targetPort: 0
    selector:
      skiff-role-name: "routing-api"
    type: "ClusterIP"
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "routing-api"
  spec:
    ports:
    - name: "routing-api"
      port: 3000
      protocol: "TCP"
      targetPort: "routing-api"
    selector:
      skiff-role-name: "routing-api"
    type: "ClusterIP"
kind: "List"
